// Sticky user row for Game Over page
// Ce fichier g√®re l'affichage de la ligne utilisateur dans l'√©cran de game over

// Fonction principale pour afficher la rang√©e utilisateur dans l'√©cran de game over
async function renderGameOverStickyUserRow() {
    // R√©cup√©rer l'√©l√©ment qui contiendra la rang√©e utilisateur
    const userRowElement = document.getElementById('gameover-user-row');
    if (!userRowElement) return;

    try {
        // 1. R√©cup√©rer la saison active - r√©utiliser l'appel existant
        let season;
        try {
            // Essayer d'abord l'endpoint principal
            const res = await fetch('/api/seasons/active');
            if (res.ok) {
                season = await res.json();
            } else {
                // Solution de secours si l'endpoint principal √©choue
                const fallbackRes = await fetch('/api/active-season');
                if (!fallbackRes.ok) {
                    throw new Error('Impossible de r√©cup√©rer la saison active');
                }
                season = await fallbackRes.json();
            }
            
            console.log(`‚úÖ Saison active trouv√©e: ${season.id} (Saison ${season.seasonNumber})`);
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration de la saison active:', error);
            userRowElement.innerHTML = '<div style="color:orange;">Impossible de charger les informations de saison. ‚ö†Ô∏è</div>';
            return;
        }
        
        // 2. R√©cup√©rer l'ID utilisateur actuel (robuste)
        let userId = window.userId || '';
        
        // Si userId n'est pas une cha√Æne mais un objet, essayer de le r√©cup√©rer autrement
        if (typeof userId !== 'string') {
            userId = '';
        }
        
        // Si toujours pas d'ID utilisateur, essayer de le r√©cup√©rer du localStorage
        if (!userId) {
            userId = localStorage.getItem('tidashUserId') || '';
        }
        
        userId = userId.trim();
        
        // V√©rifier la validit√© de l'ID
        if (!userId) {
            userRowElement.innerHTML = '<div style="color:orange;">Impossible de d√©terminer votre identifiant. ‚ö†Ô∏è</div>';
            return;
        }
        
        // 3. Utiliser l'endpoint optimis√© pour r√©cup√©rer le rang de l'utilisateur
        try {
            console.log(`üìä R√©cup√©ration du rang pour l'utilisateur ${userId} dans la saison ${season.id}...`);
            const res = await fetch(`/api/seasons/${season.id}/user-rank/${encodeURIComponent(userId)}`);
            
            if (!res.ok) {
                throw new Error('Impossible de r√©cup√©rer le rang utilisateur');
            }
            
            const userData = await res.json();
            
            // 4. Utiliser l'avatar global d√©j√† charg√© pour la page d'accueil
            // R√©cup√©rer l'avatar directement de la variable globale ou de l'√©l√©ment d'image du profil
            let avatarImgSrc;
            if (window.avatarSrc) {
                avatarImgSrc = window.avatarSrc;
                console.log('‚úÖ Utilisation de l\'avatar global:', avatarImgSrc);
            } else {
                const profileAvatarImg = document.getElementById('avatarImg');
                if (profileAvatarImg && profileAvatarImg.src) {
                    avatarImgSrc = profileAvatarImg.src;
                    console.log('‚úÖ Utilisation de l\'avatar du profil:', avatarImgSrc);
                } else {
                    // Fallback si aucun avatar n'est disponible
                    avatarImgSrc = 'avatars/avatar_default.jpg';
                    console.log('‚ö†Ô∏è Fallback sur l\'avatar par d√©faut');
                }
            }
            
            // 5. Construire la rang√©e HTML avec le score de la saison, et non le score global
            const userRow = `
                <div class="leaderboard-rank">${userData.rank || '-'}</div>
                <div class="leaderboard-avatar"><img src="${avatarImgSrc}" alt="${userData.username || 'You'}"></div>
                <div class="leaderboard-username">${userData.username || 'You'} <span style="color:#00FF9D;">(You)</span></div>
                <div class="leaderboard-score"><img src="ressources/trophy.png" alt="üèÜ">${userData.score || 0}</div>
            `;
            
            // 6. Ins√©rer dans le DOM
            userRowElement.innerHTML = userRow;
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du rang utilisateur:', error);
            
            // Fallback: essayer de r√©cup√©rer les informations de score directement depuis la table SeasonScores
            try {
                // D'abord r√©cup√©rer les donn√©es utilisateur de base
                const userRes = await fetch(`/api/users/${encodeURIComponent(userId)}`);
                if (!userRes.ok) {
                    throw new Error('Impossible de r√©cup√©rer les donn√©es utilisateur');
                }
                
                const userData = await userRes.json();
                
                // Ensuite r√©cup√©rer le score de saison sp√©cifique
                const seasonScoreRes = await fetch(`/api/seasons/${season.id}/scores/${encodeURIComponent(userId)}`);
                let seasonScore = 0;
                
                if (seasonScoreRes.ok) {
                    const seasonScoreData = await seasonScoreRes.json();
                    seasonScore = seasonScoreData.score || 0;
                }
                
                // Utiliser l'avatar global d√©j√† charg√© pour la page d'accueil
                let avatarImgSrc;
                if (window.avatarSrc) {
                    avatarImgSrc = window.avatarSrc;
                } else {
                    const profileAvatarImg = document.getElementById('avatarImg');
                    if (profileAvatarImg && profileAvatarImg.src) {
                        avatarImgSrc = profileAvatarImg.src;
                    } else {
                        // Fallback si aucun avatar n'est disponible
                        avatarImgSrc = 'avatars/avatar_default.jpg';
                    }
                }
                
                // Construire la rang√©e sans le rang mais avec le score de saison sp√©cifique
                const userRow = `
                    <div class="leaderboard-rank">-</div>
                    <div class="leaderboard-avatar"><img src="${avatarImgSrc}" alt="${userData.gameUsername || 'You'}"></div>
                    <div class="leaderboard-username">${userData.gameUsername || 'You'} <span style="color:#00FF9D;">(You)</span></div>
                    <div class="leaderboard-score"><img src="ressources/trophy.png" alt="üèÜ">${seasonScore}</div>
                `;
                
                userRowElement.innerHTML = userRow;
            } catch (fallbackError) {
                console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', fallbackError);
                userRowElement.innerHTML = '<div style="color:orange;">Impossible de charger votre classement. ‚ö†Ô∏è</div>';
            }
        }
    } catch (error) {
        console.error('‚ùå Erreur globale dans renderGameOverStickyUserRow:', error);
        userRowElement.innerHTML = '<div style="color:orange;">Une erreur s\'est produite. ‚ö†Ô∏è</div>';
    }
}

// Exposer la fonction pour qu'elle soit appel√©e depuis index.html
window.renderGameOverStickyUserRow = renderGameOverStickyUserRow;
